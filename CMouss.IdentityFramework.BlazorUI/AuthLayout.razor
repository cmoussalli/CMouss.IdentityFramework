@using CMouss.IdentityFramework

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage BrowserStorage
@inject NavigationManager NavManager

@if (authLayoutModel is not null)
{
    if (authLayoutModel.User is not null)
    {
        @ChildContent

    }
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    public AuthLayoutModel authLayoutModel { get; set; }


    // protected override void OnInitialized()
    // {
    //     GetUserInfo();

    // }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // This will ensure that the user info is fetched only once when the component is first rendered.
            GetUserInfo();
        }
        return base.OnAfterRenderAsync(firstRender);
    }


    public async Task GetUserInfo()
    {
        try
        {
            var result = await BrowserStorage.GetAsync<string>("token");
            authLayoutModel = new();
            if (result.Success && result.Value.Length > 10)
            {
                UserToken userToken = IDFManager.userTokenService.Validate(result.Value, TokenValidationMode.UseDefault);
                if (userToken == null)
                {
                    RedirectToLogin();
                }
                else
                {
                    authLayoutModel.IsAuthenticated = true;
                    authLayoutModel.User = userToken.User;
                    authLayoutModel.Token = userToken.Token;

                }
            }
            else
            {
                RedirectToLogin();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            RedirectToLogin();
        }

    }

    public void RedirectToLogin()
    {
        authLayoutModel = new();
        authLayoutModel.IsAuthenticated = false;
        authLayoutModel.Token = "";
        authLayoutModel.User = null;
        BrowserStorage.DeleteAsync("token");
        StateHasChanged();
        NavManager.NavigateTo($"{IDFBlazorUIConfig.LoginRedirectURL}?returnurl={NavManager.ToAbsoluteUri(NavManager.Uri).PathAndQuery}" , true);
    }



}
